1. Explain the principles of statistical quality control. What are the tools used for this purpose? Explain the principle of a control chart.
The principles of statistical quality control (SQC) is to improve the quality of a product based on the statistics it made over time. The tools used for this purpose are: Pareto analysis, Trend Chart, Flow chart, Histogram, Scatter diagram, Control chart, Cause and effect diagram. The principles of a control chart is to be used to study how a process changes over time. Data are plotted in time order.
2.  Explain the concept of lean principles.
The concept of the lean principle is to identify and eliminate waste through continuous improvement. The continuous improvement is based on the idea of people to improve the quality of a product.
3. What is an “Ishikawa” diagram? When should the Ishikawa diagram be used? Provide a procedure to construct an Ishikawa diagram.
Ishikawa diagram is a causal diagram created by Kaoru Ishikawa that show the causes of a specific event. It should be used to design a product and prevent quality defect to identify potential factors causing an overall effect. Procedures to construct an Ishikawa diagram: First, define the problem (effect) to be solved. Second, identify the key causes of the problem or event. Third, identify the reasons behind the key causes. And lastly, identify the most likely causes.
4.  What is total quality management (TQM)? What is the difference between TQM and TQC?
Total quality management is a system of management based on the principle that every staff member must be committed to maintaining high standards of work in every aspect of a company's operations. The difference between TQM and TQC is that: In TQM, employees are required to be committed to maintaining high standards of work. While in TQC, total participation is required; employees are encouraged to generate ideas and implement them.
5.  Explain the differences between validation and verification.
Validation is the process of checking whether the specification captures the customer's needs, while verification is the process of checking that the software meets the specification.

6. Explain the differences between failure, error, and fault .
Error: A human action that produces an incorrect result. The mistakes made by programmer is knowns  as an ‘Error’.
Fault: A manifestation of na 'Error' in software. Faults are also known colloquially as defaults or  bugs.
Failure:	 Failure is a deviation of the software from its intended purpose. If under certain    circumstances these 'Defects' get executed by the tester during the testing then it results into the 'Failure' which is known as software 'Failure'.
7. What is a test case? What are the objectives of testing?
Test case is a set of conditions under which a tester will determine whether an application, software system or one of its features is working as it was originally established f	or it to do. The objectives of testing are Finding defects which may get created by the programmer while developing the software, Gaining confidence in and providing information about the level of quality, To prevent defects and To make sure that the end result meets the business and user requirements.

8. Explain the concepts of unit, integration, system, acceptance, and regression testing.
Unit- This type of testing is performed by developers before the setup is handed over to the testing team to formally execute the test cases. Unit testing is performed by the respective developers on the individual units of source code assigned areas.
Integration- Integration testing is defined as the testing of combined parts of an application to determine if they function correctly.
Acceptance- This is arguably the most important type of testing, as it is conducted by the Quality Assurance Team who will gauge whether the application meets the intended specifications and satisfies the client’s requirement.
Regression- Whenever a change in a software application is made, it is quite possible that other areas within the application have been affected by this change.

9. What are the different sources from which test cases can be selected?
Requirement and Functional Specifications, Source Code, Input and output Domain, Operational Profile, and Fault Model

10. What is the difference between fault injection and fault simulation?
Fault seeding is performed by actually changing the code being tested in order to check test coverage while Fault injection involves introducing errors “on the fly” in order to perturb the normal flow of a program either with the purpose of extending test coverage or stress testing the system.

11. Explain the differences between structural and functional testing.
Structural is a "white box" testing and based on the algorithm or code. Functional testing is a "black box"(behavioral) testing where the tester verifies the functional specification.


12. What are the strengths and weaknesses of automated testing and manual testing?
Weaknesses of automated testing:
1. Tools can be expensive
The automation tools can be an expensive purchase. As a result, it is important to only use the ones that will give you full, or as close to full coverage, as you can find.
2. Tools still take time
While the automation process cuts down on the time it takes to test everything by hand, automated testing is still a time intensive process. A considerable amount of time goes into developing the automated tests and letting them run. For example, a large client of ours ran into trouble when their daily run of automated tests exceeded the 24-hour mark.
3. Tools have limitations
While automated tests will detect most bugs in your system, there are limitations. For example, the automated tools can’t test for visual considerations like image color or font size. Changes in these can only be detected by manual testing, which means that not all testing can be done with automatic tools.
 
Strengths of Automated Testing
2. Can be cost effective
While automation tools can be expensive in the short-term, they save you money in the long-term. They not only do more than a human can in a given amount of time, they also find defects quicker. This allows your team to react more quickly, saving you both precious time and money.
3. More interesting
Filling out the same forms time after time can be frustrating, and not to mention boring. Test automation solves this problem. The process of setting up test cases takes coding and thought, which keeps your best technical minds involved and committed to the process.
4. Everyone can see results
When one person is doing manual testing, the rest of the team can’t see the results of the tests being run. With automated tests, however, people can sign into the testing system and see the results. This allows for greater team collaboration and a better final product.
Weaknesses of Manual testing:
1. Certain tasks are difficult to do manually
There are certain actions that are difficult to do manually. For example? Low level interface regression testing. This kind of testing is extremely difficult to perform manually, and, as a result, is prone to mistakes and oversight when done by hand. Automated testing, once set up, is much better equipped to find errors for this kind of testing.
2. Not stimulating
Manual testing can be repetitive and boring – no one wants to keep filling out the same forms time after time. As a result, many testers have a hard time staying engaged in this process, and errors are more likely to occur.
3. Can’t reuse manual tests
With automated tests, if you add anything to the program, you can rerun all of the required tests instantly – the tests are already set up. This isn’t the case with manual testing. If there is any change to the software, you have to run the tests again by hand. This is valuable time lost.
 Strengths of Manual Testing
1. Short-term cost is lower
Buying software automation tools is expensive. With manual testing, you won’t have to put the same up-front costs into the software.
2. More likely to find real user issues
Automated tests are just that – automatic. They’re robotic and don’t necessarily act as a real user would. Manual testing, on the other hand, allows the developing program to be used as it would be upon launch. Any bugs that may pop up when a user handles the program in a certain way are more likely to be caught with manual testing.
3. Manual testing is flexible
When one of those brilliant thoughts comes to you, something that could change the course of the project, you want to be able to work on it immediately. With automated testing this is difficult. You have to set up test cases, program it into the automated tool, and then run the tests. With manual testing, you can just quickly test and see the results. Automatic tests take more time to set up, which doesn’t allow you to test ideas quickly and easily.



